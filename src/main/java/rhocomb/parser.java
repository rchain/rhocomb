
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package rhocomb;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\017\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\003\005\000\002\003\003\000\002\003\006" +
    "\000\002\004\003\000\002\004\010\000\002\004\006\000" +
    "\002\004\012\000\002\004\012\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\026\004\010\006\006\012\005\015\020\016" +
    "\016\017\015\020\014\021\013\022\012\023\011\001\002" +
    "\000\014\002\000\005\000\010\000\011\000\013\000\001" +
    "\002\000\004\007\075\001\002\000\014\002\ufffb\005\ufffb" +
    "\010\ufffb\011\ufffb\013\ufffb\001\002\000\014\002\ufffd\005" +
    "\ufffd\010\ufffd\011\ufffd\013\ufffd\001\002\000\026\004\010" +
    "\006\006\012\005\015\020\016\016\017\015\020\014\021" +
    "\013\022\012\023\011\001\002\000\004\007\064\001\002" +
    "\000\004\007\057\001\002\000\004\007\054\001\002\000" +
    "\004\007\047\001\002\000\004\007\040\001\002\000\004" +
    "\007\033\001\002\000\006\002\032\013\030\001\002\000" +
    "\004\007\021\001\002\000\004\014\022\001\002\000\026" +
    "\004\010\006\006\012\005\015\020\016\016\017\015\020" +
    "\014\021\013\022\012\023\011\001\002\000\004\010\024" +
    "\001\002\000\004\014\022\001\002\000\004\011\026\001" +
    "\002\000\014\002\ufff5\005\ufff5\010\ufff5\011\ufff5\013\ufff5" +
    "\001\002\000\010\010\ufff3\011\ufff3\013\030\001\002\000" +
    "\026\004\010\006\006\012\005\015\020\016\016\017\015" +
    "\020\014\021\013\022\012\023\011\001\002\000\014\002" +
    "\uffff\005\uffff\010\uffff\011\uffff\013\uffff\001\002\000\004" +
    "\002\001\001\002\000\004\014\022\001\002\000\004\010" +
    "\035\001\002\000\004\014\022\001\002\000\004\011\037" +
    "\001\002\000\014\002\ufff4\005\ufff4\010\ufff4\011\ufff4\013" +
    "\ufff4\001\002\000\004\014\022\001\002\000\004\010\042" +
    "\001\002\000\004\014\022\001\002\000\004\010\044\001" +
    "\002\000\004\014\022\001\002\000\004\011\046\001\002" +
    "\000\014\002\ufff8\005\ufff8\010\ufff8\011\ufff8\013\ufff8\001" +
    "\002\000\004\014\022\001\002\000\004\010\051\001\002" +
    "\000\004\014\022\001\002\000\004\011\053\001\002\000" +
    "\014\002\ufff6\005\ufff6\010\ufff6\011\ufff6\013\ufff6\001\002" +
    "\000\004\014\022\001\002\000\004\011\056\001\002\000" +
    "\014\002\ufff9\005\ufff9\010\ufff9\011\ufff9\013\ufff9\001\002" +
    "\000\004\014\022\001\002\000\004\010\061\001\002\000" +
    "\004\014\022\001\002\000\004\011\063\001\002\000\014" +
    "\002\ufffa\005\ufffa\010\ufffa\011\ufffa\013\ufffa\001\002\000" +
    "\004\014\022\001\002\000\004\010\066\001\002\000\004" +
    "\014\022\001\002\000\004\010\070\001\002\000\004\014" +
    "\022\001\002\000\004\011\072\001\002\000\014\002\ufff7" +
    "\005\ufff7\010\ufff7\011\ufff7\013\ufff7\001\002\000\006\005" +
    "\074\013\030\001\002\000\014\002\ufffe\005\ufffe\010\ufffe" +
    "\011\ufffe\013\ufffe\001\002\000\004\014\022\001\002\000" +
    "\004\011\077\001\002\000\014\002\ufffc\005\ufffc\010\ufffc" +
    "\011\ufffc\013\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\010\002\016\003\003\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\072\003\003\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\022\001\001\000\010" +
    "\002\026\003\003\004\006\001\001\000\002\001\001\000" +
    "\004\005\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\030\004\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\033\001\001" +
    "\000\002\001\001\000\004\005\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\040\001\001\000\002" +
    "\001\001\000\004\005\042\001\001\000\002\001\001\000" +
    "\004\005\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\047\001\001\000\002\001\001\000\004\005" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\057\001\001\000\002\001\001\000\004\005\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\064\001\001\000\002\001\001\000\004\005\066\001\001" +
    "\000\002\001\001\000\004\005\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\075\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public rhocomb.Absyn.RProc pRProc() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (rhocomb.Absyn.RProc) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= RProc EOF 
            {
              Object RESULT =null;
		rhocomb.Absyn.RProc start_val = (rhocomb.Absyn.RProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // RProc ::= RProc1 
            {
              rhocomb.Absyn.RProc RESULT =null;
		rhocomb.Absyn.RProc p_1 = (rhocomb.Absyn.RProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RProc",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // RProc ::= RProc _SYMB_7 RProc1 
            {
              rhocomb.Absyn.RProc RESULT =null;
		rhocomb.Absyn.RProc p_1 = (rhocomb.Absyn.RProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		rhocomb.Absyn.RProc p_3 = (rhocomb.Absyn.RProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rhocomb.Absyn.RPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RProc",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // RProc1 ::= _SYMB_0 RProc _SYMB_1 
            {
              rhocomb.Absyn.RProc RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rhocomb.Absyn.RProc p_2 = (rhocomb.Absyn.RProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RProc1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // RProc1 ::= RComb 
            {
              rhocomb.Absyn.RProc RESULT =null;
		rhocomb.Absyn.RComb p_1 = (rhocomb.Absyn.RComb)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rhocomb.Absyn.RInj(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RProc1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // RProc1 ::= _SYMB_6 _SYMB_3 RName _SYMB_5 
            {
              rhocomb.Absyn.RProc RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rhocomb.Absyn.RName p_3 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rhocomb.Absyn.RStr(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RProc1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // RComb ::= _SYMB_2 
            {
              rhocomb.Absyn.RComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rhocomb.Absyn.RZero(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // RComb ::= _SYMB_14 _SYMB_3 RName _SYMB_4 RName _SYMB_5 
            {
              rhocomb.Absyn.RComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rhocomb.Absyn.RName p_3 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rhocomb.Absyn.RName p_5 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rhocomb.Absyn.RMsg(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // RComb ::= _SYMB_13 _SYMB_3 RName _SYMB_5 
            {
              rhocomb.Absyn.RComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rhocomb.Absyn.RName p_3 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rhocomb.Absyn.RKill(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // RComb ::= _SYMB_11 _SYMB_3 RName _SYMB_4 RName _SYMB_4 RName _SYMB_5 
            {
              rhocomb.Absyn.RComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		rhocomb.Absyn.RName p_3 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rhocomb.Absyn.RName p_5 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rhocomb.Absyn.RName p_7 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rhocomb.Absyn.RDup(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // RComb ::= _SYMB_15 _SYMB_3 RName _SYMB_4 RName _SYMB_4 RName _SYMB_5 
            {
              rhocomb.Absyn.RComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		rhocomb.Absyn.RName p_3 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rhocomb.Absyn.RName p_5 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rhocomb.Absyn.RName p_7 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rhocomb.Absyn.RSeq(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // RComb ::= _SYMB_12 _SYMB_3 RName _SYMB_4 RName _SYMB_5 
            {
              rhocomb.Absyn.RComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rhocomb.Absyn.RName p_3 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rhocomb.Absyn.RName p_5 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rhocomb.Absyn.RFwd(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // RComb ::= _SYMB_9 _SYMB_3 RName _SYMB_4 RName _SYMB_5 
            {
              rhocomb.Absyn.RComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rhocomb.Absyn.RName p_3 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rhocomb.Absyn.RName p_5 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rhocomb.Absyn.RBrl(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RComb ::= _SYMB_10 _SYMB_3 RName _SYMB_4 RName _SYMB_5 
            {
              rhocomb.Absyn.RComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		rhocomb.Absyn.RName p_3 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		rhocomb.Absyn.RName p_5 = (rhocomb.Absyn.RName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rhocomb.Absyn.RBrr(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // RName ::= _SYMB_8 RProc 
            {
              rhocomb.Absyn.RName RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		rhocomb.Absyn.RProc p_2 = (rhocomb.Absyn.RProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new rhocomb.Absyn.RQuot(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RName",3, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
