
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package picomb;

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\004\000\002\002\003\000\002\002" +
    "\005\000\002\003\005\000\002\003\003\000\002\003\004" +
    "\000\002\003\006\000\002\004\003\000\002\004\010\000" +
    "\002\004\006\000\002\004\012\000\002\004\012\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\005" +
    "\003\000\002\005\003\000\002\006\002\000\002\006\003" +
    "\000\002\006\005\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\030\004\010\006\007\012\004\015\021\016" +
    "\020\017\017\020\015\022\014\023\013\024\012\025\011" +
    "\001\002\000\030\004\010\006\007\012\004\015\021\016" +
    "\020\017\017\020\015\022\014\023\013\024\012\025\011" +
    "\001\002\000\010\002\000\005\000\013\000\001\002\000" +
    "\006\002\103\013\101\001\002\000\010\002\ufffa\005\ufffa" +
    "\013\ufffa\001\002\000\030\004\010\006\007\012\004\015" +
    "\021\016\020\017\017\020\015\022\014\023\013\024\012" +
    "\025\011\001\002\000\004\007\070\001\002\000\010\014" +
    "\024\021\ufff0\026\025\001\002\000\004\007\055\001\002" +
    "\000\004\007\052\001\002\000\004\007\045\001\002\000" +
    "\010\002\ufffd\005\ufffd\013\ufffd\001\002\000\004\007\036" +
    "\001\002\000\004\007\031\001\002\000\004\007\022\001" +
    "\002\000\006\014\024\026\025\001\002\000\004\010\026" +
    "\001\002\000\010\010\ufff2\011\ufff2\021\ufff2\001\002\000" +
    "\010\010\ufff1\011\ufff1\021\ufff1\001\002\000\006\014\024" +
    "\026\025\001\002\000\004\011\030\001\002\000\010\002" +
    "\ufff4\005\ufff4\013\ufff4\001\002\000\006\014\024\026\025" +
    "\001\002\000\004\010\033\001\002\000\006\014\024\026" +
    "\025\001\002\000\004\011\035\001\002\000\010\002\ufff3" +
    "\005\ufff3\013\ufff3\001\002\000\006\014\024\026\025\001" +
    "\002\000\004\010\040\001\002\000\006\014\024\026\025" +
    "\001\002\000\004\010\042\001\002\000\006\014\024\026" +
    "\025\001\002\000\004\011\044\001\002\000\010\002\ufff7" +
    "\005\ufff7\013\ufff7\001\002\000\006\014\024\026\025\001" +
    "\002\000\004\010\047\001\002\000\006\014\024\026\025" +
    "\001\002\000\004\011\051\001\002\000\010\002\ufff5\005" +
    "\ufff5\013\ufff5\001\002\000\006\014\024\026\025\001\002" +
    "\000\004\011\054\001\002\000\010\002\ufff8\005\ufff8\013" +
    "\ufff8\001\002\000\006\014\024\026\025\001\002\000\004" +
    "\010\057\001\002\000\006\014\024\026\025\001\002\000" +
    "\004\011\061\001\002\000\010\002\ufff9\005\ufff9\013\ufff9" +
    "\001\002\000\004\021\066\001\002\000\006\010\064\021" +
    "\uffef\001\002\000\010\014\024\021\ufff0\026\025\001\002" +
    "\000\004\021\uffee\001\002\000\030\004\010\006\007\012" +
    "\004\015\021\016\020\017\017\020\015\022\014\023\013" +
    "\024\012\025\011\001\002\000\010\002\ufffb\005\ufffb\013" +
    "\ufffb\001\002\000\006\014\024\026\025\001\002\000\004" +
    "\010\072\001\002\000\006\014\024\026\025\001\002\000" +
    "\004\010\074\001\002\000\006\014\024\026\025\001\002" +
    "\000\004\011\076\001\002\000\010\002\ufff6\005\ufff6\013" +
    "\ufff6\001\002\000\006\005\100\013\101\001\002\000\010" +
    "\002\ufffe\005\ufffe\013\ufffe\001\002\000\030\004\010\006" +
    "\007\012\004\015\021\016\020\017\017\020\015\022\014" +
    "\023\013\024\012\025\011\001\002\000\010\002\uffff\005" +
    "\uffff\013\uffff\001\002\000\004\002\001\001\002\000\010" +
    "\002\ufffc\005\ufffc\013\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\102\000\010\002\005\003\004\004\015\001\001\000" +
    "\006\003\103\004\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\076\003\004\004" +
    "\015\001\001\000\002\001\001\000\006\005\062\006\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\031\001\001\000\002\001\001\000\004\005\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\036\001" +
    "\001\000\002\001\001\000\004\005\040\001\001\000\002" +
    "\001\001\000\004\005\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\045\001\001\000\002\001\001" +
    "\000\004\005\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\055\001\001\000\002\001\001\000" +
    "\004\005\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\062\006" +
    "\064\001\001\000\002\001\001\000\006\003\066\004\015" +
    "\001\001\000\002\001\001\000\004\005\070\001\001\000" +
    "\002\001\001\000\004\005\072\001\001\000\002\001\001" +
    "\000\004\005\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\101" +
    "\004\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public picomb.Absyn.YProc pYProc() throws Exception
  {
    java_cup.runtime.Symbol res = parse();
    return (picomb.Absyn.YProc) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
  report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
  throw new Exception("Unrecoverable Syntax Error");
}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


public java_cup.runtime.ComplexSymbolFactory.Location getLeftLocation(
    java_cup.runtime.ComplexSymbolFactory.Location ... locations) {
  for (java_cup.runtime.ComplexSymbolFactory.Location l : locations) {
    if (l != null) {
      return l;
    }
  }
  return null;
}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= YProc EOF 
            {
              Object RESULT =null;
		picomb.Absyn.YProc start_val = (picomb.Absyn.YProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // YProc ::= YProc1 
            {
              picomb.Absyn.YProc RESULT =null;
		picomb.Absyn.YProc p_1 = (picomb.Absyn.YProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YProc",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // YProc ::= YProc _SYMB_7 YProc1 
            {
              picomb.Absyn.YProc RESULT =null;
		picomb.Absyn.YProc p_1 = (picomb.Absyn.YProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		picomb.Absyn.YProc p_3 = (picomb.Absyn.YProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.YPar(p_1,p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YProc",0, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // YProc1 ::= _SYMB_0 YProc _SYMB_1 
            {
              picomb.Absyn.YProc RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		picomb.Absyn.YProc p_2 = (picomb.Absyn.YProc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YProc1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // YProc1 ::= YComb 
            {
              picomb.Absyn.YProc RESULT =null;
		picomb.Absyn.YComb p_1 = (picomb.Absyn.YComb)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.YInj(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YProc1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // YProc1 ::= _SYMB_6 YProc1 
            {
              picomb.Absyn.YProc RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		picomb.Absyn.YProc p_2 = (picomb.Absyn.YProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.YStr(p_2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YProc1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // YProc1 ::= _SYMB_16 ListYName _SYMB_13 YProc1 
            {
              picomb.Absyn.YProc RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		picomb.Absyn.ListYName p_2 = (picomb.Absyn.ListYName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		picomb.Absyn.YProc p_4 = (picomb.Absyn.YProc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.YNew(p_2,p_4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YProc1",1, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // YComb ::= _SYMB_2 
            {
              picomb.Absyn.YComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.YZero(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // YComb ::= _SYMB_15 _SYMB_3 YName _SYMB_4 YName _SYMB_5 
            {
              picomb.Absyn.YComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		picomb.Absyn.YName p_3 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		picomb.Absyn.YName p_5 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.YMsg(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // YComb ::= _SYMB_14 _SYMB_3 YName _SYMB_5 
            {
              picomb.Absyn.YComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		picomb.Absyn.YName p_3 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.YKill(p_3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // YComb ::= _SYMB_11 _SYMB_3 YName _SYMB_4 YName _SYMB_4 YName _SYMB_5 
            {
              picomb.Absyn.YComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		picomb.Absyn.YName p_3 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		picomb.Absyn.YName p_5 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		picomb.Absyn.YName p_7 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.YDup(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // YComb ::= _SYMB_17 _SYMB_3 YName _SYMB_4 YName _SYMB_4 YName _SYMB_5 
            {
              picomb.Absyn.YComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		picomb.Absyn.YName p_3 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		picomb.Absyn.YName p_5 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		picomb.Absyn.YName p_7 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_8 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.YSeq(p_3,p_5,p_7); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // YComb ::= _SYMB_12 _SYMB_3 YName _SYMB_4 YName _SYMB_5 
            {
              picomb.Absyn.YComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		picomb.Absyn.YName p_3 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		picomb.Absyn.YName p_5 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.YFwd(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // YComb ::= _SYMB_9 _SYMB_3 YName _SYMB_4 YName _SYMB_5 
            {
              picomb.Absyn.YComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		picomb.Absyn.YName p_3 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		picomb.Absyn.YName p_5 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.YBrl(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // YComb ::= _SYMB_10 _SYMB_3 YName _SYMB_4 YName _SYMB_5 
            {
              picomb.Absyn.YComb RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		picomb.Absyn.YName p_3 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Object p_4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		picomb.Absyn.YName p_5 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Object p_6 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.YBrr(p_3,p_5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YComb",2, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // YName ::= _SYMB_8 
            {
              picomb.Absyn.YName RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.NWild(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YName",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // YName ::= CVar 
            {
              picomb.Absyn.YName RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.NVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YName",3, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ListYName ::= 
            {
              picomb.Absyn.ListYName RESULT =null;
		 RESULT = new picomb.Absyn.ListYName(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListYName",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListYName ::= YName 
            {
              picomb.Absyn.ListYName RESULT =null;
		picomb.Absyn.YName p_1 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.ListYName(); RESULT.addLast(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListYName",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ListYName ::= YName _SYMB_4 ListYName 
            {
              picomb.Absyn.ListYName RESULT =null;
		picomb.Absyn.YName p_1 = (picomb.Absyn.YName)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Object p_2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		picomb.Absyn.ListYName p_3 = (picomb.Absyn.ListYName)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListYName",4, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // YVar ::= _SYMB_8 
            {
              picomb.Absyn.YVar RESULT =null;
		Object p_1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.YWild(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YVar",5, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // YVar ::= CVar 
            {
              picomb.Absyn.YVar RESULT =null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new picomb.Absyn.YVVar(p_1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("YVar",5, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
